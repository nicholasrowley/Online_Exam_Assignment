package online_exam;

import java.awt.Color;
import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.ArrayList;

/**
 * This program gets exam multi choice questions from database server for the user to answer.
 * Their results are then stored on the database.
 * @author Nick Rowley
 */
public class ClientMenu extends javax.swing.JFrame {

    private ArrayList<String> questions = new ArrayList<>();
    private ArrayList<String> answers = new ArrayList<>();
    private ArrayList<String> userAnswers = new ArrayList<>();
    private ArrayList<String> userAnswerScore = new ArrayList<>();
    private ArrayList<ArrayList<String>> questionChoices = new ArrayList<>();
    private ServerInterface connection;
    private int questionNum;
    private String studentName;
    private String studentId;
    private float score;
    private String grade;

    /**
     * Creates new form Client_Menu
     */
    public ClientMenu() {
        initComponents();

        for (int i = 0; i < 5; i++) //set all exam questions to 'Not Answered'
        {
            userAnswers.add("Not Answered");
            userAnswerScore.add("Incorrect");
        }
        questionNum = 0;

        try {
            getQuestions();
        } catch (NotBoundException | MalformedURLException | RemoteException ex) {
            dbNoConnectDialog.setVisible(true);
        }

        userInfoFrame.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dbNoConnectDialog = new javax.swing.JDialog();
        errorDescription = new javax.swing.JLabel();
        retryConnectButton = new javax.swing.JButton();
        exitApplicationButton = new javax.swing.JButton();
        userInfoFrame = new javax.swing.JFrame();
        startTestButton = new javax.swing.JButton();
        nameLabel = new javax.swing.JLabel();
        studentIdLabel = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        studentIdField = new javax.swing.JTextField();
        questionPanel = new javax.swing.JLabel();
        aChoiceButton = new javax.swing.JButton();
        bChoiceButton = new javax.swing.JButton();
        cChoiceButton = new javax.swing.JButton();
        dChoiceButton = new javax.swing.JButton();
        prevQButton = new javax.swing.JButton();
        nextQButton = new javax.swing.JButton();

        dbNoConnectDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        dbNoConnectDialog.setTitle("Could not connect to databse");
        dbNoConnectDialog.setMaximumSize(new java.awt.Dimension(310, 163));
        dbNoConnectDialog.setMinimumSize(new java.awt.Dimension(310, 163));
        dbNoConnectDialog.setModal(true);
        dbNoConnectDialog.setName("noDbWindow"); // NOI18N
        dbNoConnectDialog.setResizable(false);

        errorDescription.setText("Could not connect to server database. Retry?");
        errorDescription.setToolTipText("");

        retryConnectButton.setText("Retry");
        retryConnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                retryConnectButtonActionPerformed(evt);
            }
        });

        exitApplicationButton.setText("Close");
        exitApplicationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitApplicationButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout dbNoConnectDialogLayout = new javax.swing.GroupLayout(dbNoConnectDialog.getContentPane());
        dbNoConnectDialog.getContentPane().setLayout(dbNoConnectDialogLayout);
        dbNoConnectDialogLayout.setHorizontalGroup(
            dbNoConnectDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dbNoConnectDialogLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(dbNoConnectDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(dbNoConnectDialogLayout.createSequentialGroup()
                        .addComponent(retryConnectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(exitApplicationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(errorDescription))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        dbNoConnectDialogLayout.setVerticalGroup(
            dbNoConnectDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dbNoConnectDialogLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(errorDescription)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(dbNoConnectDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(exitApplicationButton, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                    .addComponent(retryConnectButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        userInfoFrame.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        userInfoFrame.setTitle("Enter your details");
        userInfoFrame.setMaximumSize(new java.awt.Dimension(369, 205));
        userInfoFrame.setMinimumSize(new java.awt.Dimension(369, 205));
        userInfoFrame.setName("userInfoFrame"); // NOI18N
        userInfoFrame.setResizable(false);

        startTestButton.setText("Start Test");
        startTestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startTestButtonActionPerformed(evt);
            }
        });

        nameLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        nameLabel.setText("Name: ");

        studentIdLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        studentIdLabel.setText("Student ID: ");

        nameField.setToolTipText("Enter your name");

        studentIdField.setToolTipText("Enter your ID");

        javax.swing.GroupLayout userInfoFrameLayout = new javax.swing.GroupLayout(userInfoFrame.getContentPane());
        userInfoFrame.getContentPane().setLayout(userInfoFrameLayout);
        userInfoFrameLayout.setHorizontalGroup(
            userInfoFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userInfoFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(userInfoFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(userInfoFrameLayout.createSequentialGroup()
                        .addComponent(nameLabel)
                        .addGap(54, 54, 54)
                        .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(userInfoFrameLayout.createSequentialGroup()
                        .addComponent(studentIdLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(userInfoFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(startTestButton, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(studentIdField))))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        userInfoFrameLayout.setVerticalGroup(
            userInfoFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, userInfoFrameLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(userInfoFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel)
                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(userInfoFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(studentIdLabel)
                    .addComponent(studentIdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(startTestButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Online Exam");
        setName("examFrame"); // NOI18N

        questionPanel.setBackground(new java.awt.Color(255, 255, 255));
        questionPanel.setText("QuestionPanel");
        questionPanel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        questionPanel.setOpaque(true);

        aChoiceButton.setBackground(java.awt.Color.lightGray);
        aChoiceButton.setText("A");
        aChoiceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aChoiceButtonActionPerformed(evt);
            }
        });

        bChoiceButton.setBackground(java.awt.Color.lightGray);
        bChoiceButton.setText("B");
        bChoiceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bChoiceButtonActionPerformed(evt);
            }
        });

        cChoiceButton.setBackground(java.awt.Color.lightGray);
        cChoiceButton.setText("C");
        cChoiceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cChoiceButtonActionPerformed(evt);
            }
        });

        dChoiceButton.setBackground(java.awt.Color.lightGray);
        dChoiceButton.setText("D");
        dChoiceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dChoiceButtonActionPerformed(evt);
            }
        });

        prevQButton.setBackground(java.awt.Color.lightGray);
        prevQButton.setText("Previous Question");
        prevQButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevQButtonActionPerformed(evt);
            }
        });

        nextQButton.setBackground(java.awt.Color.lightGray);
        nextQButton.setText("Next Question");
        nextQButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextQButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(prevQButton, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(nextQButton, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cChoiceButton, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE)
                            .addComponent(aChoiceButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dChoiceButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bChoiceButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(questionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(65, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(questionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bChoiceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(aChoiceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cChoiceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dChoiceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(prevQButton, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nextQButton, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Button Choice A when pressed. 
     */
    private void aChoiceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aChoiceButtonActionPerformed
        if (answers.get(questionNum).equals("A")) {
            userAnswerScore.set(questionNum, "Correct");
        } else {
            userAnswerScore.set(questionNum, "Incorrect");
        }
        //page refresh
        userAnswers.set(questionNum, "A");
        pageRefresh();
    }//GEN-LAST:event_aChoiceButtonActionPerformed

    /**
     * Button Choice B when pressed. 
     */
    private void bChoiceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bChoiceButtonActionPerformed
        if (answers.get(questionNum).equals("B")) {
            userAnswerScore.set(questionNum, "Correct");
        } else {
            userAnswerScore.set(questionNum, "Incorrect");
        }
        userAnswers.set(questionNum, "B");
        pageRefresh();
    }//GEN-LAST:event_bChoiceButtonActionPerformed

    /**
     * Button Choice C when pressed. 
     */
    private void cChoiceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cChoiceButtonActionPerformed
        if (answers.get(questionNum).equals("C")) {
            userAnswerScore.set(questionNum, "Correct");
        } else {
            userAnswerScore.set(questionNum, "Incorrect");
        }
        userAnswers.set(questionNum, "C");
        pageRefresh();
    }//GEN-LAST:event_cChoiceButtonActionPerformed

    /**
     * Button Choice D when pressed. 
     */
    private void dChoiceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dChoiceButtonActionPerformed
        if (answers.get(questionNum).equals("D")) {
            userAnswerScore.set(questionNum, "Correct");
        } else {
            userAnswerScore.set(questionNum, "Incorrect");
        }
        userAnswers.set(questionNum, "D");
        pageRefresh();
    }//GEN-LAST:event_dChoiceButtonActionPerformed

    /**
     * Button Next Question when pressed. 
     */
    private void nextQButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextQButtonActionPerformed
        questionNum++;
        if (questionNum > 6)
            System.exit(1);
        else if (questionNum > 5) {  //if button was pressed on the results page.
            calculateScore();
            try {
                System.out.println("There are no more next questions.");
                connection = (ServerInterface) Naming.lookup("//localhost/ServerMethods");
                connection.storeResults(studentName, studentId, score, grade);
                prevQButton.setEnabled(false);
                nextQButton.setText("Close");
                System.out.println("The test is over.");
                questionPanel.setText("<html>Results Page <br>Question 1: "
                    + userAnswers.get(0) +  " - " + userAnswerScore.get(0) + "<br>Question 2: "
                    + userAnswers.get(1) + " - " + userAnswerScore.get(1) + "<br>Question 3: "
                    + userAnswers.get(2) + " - " + userAnswerScore.get(2) + "<br>Question 4: "
                    + userAnswers.get(3) + " - " + userAnswerScore.get(3) + "<br>Question 5: "
                    + userAnswers.get(4) + " - " + userAnswerScore.get(4) + "<br>Score: "
                    + score + "%<br>Grade: " + grade + "</html>");
            } catch (Exception ex) {
                System.out.println("Error: Unable to store results please check "
                        + "databse connection and try again.");
            }
        } else {
            changeQuestion();
            if (questionNum > 4) {  //if results page was opened
                System.out.println("Review your questions.");
                nextQButton.setText("Finish Test");
            }
        }
        pageRefresh();
    }//GEN-LAST:event_nextQButtonActionPerformed

    /**
     * Button Previous Question when pressed. 
     */
    private void prevQButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevQButtonActionPerformed
        if (questionNum < 1) {
            System.out.println("There are no more previous questions.");
            dbNoConnectDialog.setVisible(true);
        } else {
            if (questionNum > 4) {
                nextQButton.setText("Next Question");
            }

            questionNum--;
            changeQuestion();
        }
        pageRefresh();
    }//GEN-LAST:event_prevQButtonActionPerformed

    /**
     * Button Retry from Dialog window when pressed. 
     */
    private void retryConnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_retryConnectButtonActionPerformed
        try {
            dbNoConnectDialog.setVisible(false);
            getQuestions();
        } catch (NotBoundException | MalformedURLException | RemoteException ex) {
            dbNoConnectDialog.setVisible(true);
        }
    }//GEN-LAST:event_retryConnectButtonActionPerformed

    /**
     * Button Exit from Dialog window when pressed. 
     */
    private void exitApplicationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitApplicationButtonActionPerformed
        System.exit(1);
    }//GEN-LAST:event_exitApplicationButtonActionPerformed

    /**
     * Button Start Test from User Info frame when pressed. 
     */
    private void startTestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startTestButtonActionPerformed
        if (!(nameField.getText().equals("") || studentIdField.getText().equals("")) 
                && !(nameField.getText().length() > 50 || studentIdField.getText().length() > 10)) {
            studentName = nameField.getText();
            studentId = studentIdField.getText();
            userInfoFrame.setVisible(false);
            setVisible(true);
        }
        else
        {
            System.out.println("Please check that your inputs meet requirements");
            System.out.println("- Must not be empty");
            System.out.println("- name is 50 or less characters");
            System.out.println("- id is 10 or less characters");
        }
    }//GEN-LAST:event_startTestButtonActionPerformed

    /**
     * Collects and saves information from database server.
     */
    private void getQuestions() throws RemoteException, NotBoundException, MalformedURLException {
        connection = (ServerInterface) Naming.lookup("//localhost/ServerMethods");
        //call RMI methods here

        questions = connection.getExamQuestions();
        questionChoices = connection.getExamChoices();
        answers = connection.getExamAnswers();
        changeQuestion();
    }

    /**
     * Changes the question displayed on the question panel when Next Question
     * button is pressed.
     */
    private void changeQuestion() {
        if (questionNum == 5) //The Review page
        {
            questionPanel.setText("<html>Review Page <br>Question 1: "
                    + userAnswers.get(0) + "<br>Question 2: "
                    + userAnswers.get(1) + "<br>Question 3: "
                    + userAnswers.get(2) + "<br>Question 4: "
                    + userAnswers.get(3) + "<br>Question 5: "
                    + userAnswers.get(4) + "<br>" + "</html>");
            aChoiceButton.setEnabled(false);
            bChoiceButton.setEnabled(false);
            cChoiceButton.setEnabled(false);
            dChoiceButton.setEnabled(false);
        } else if (questionNum < 5) {
            aChoiceButton.setEnabled(true);
            bChoiceButton.setEnabled(true);
            cChoiceButton.setEnabled(true);
            dChoiceButton.setEnabled(true);
            questionPanel.setText("<html><body style='width: 200px'>"
                    + questions.get(questionNum) + "<br><br>"
                    + questionChoices.get(questionNum).get(0) + "<br><br>"
                    + questionChoices.get(questionNum).get(1) + "<br><br>"
                    + questionChoices.get(questionNum).get(2) + "<br><br>"
                    + questionChoices.get(questionNum).get(3));
        }
    }

    /**
     * Method used to show the users answer to the question being viewed. 
     */
    public void pageRefresh() //Used last whenever an action is performed
    {
        //detect previously selected answers (if any)
        aChoiceButton.setBackground(Color.lightGray);
        bChoiceButton.setBackground(Color.lightGray);
        cChoiceButton.setBackground(Color.lightGray);
        dChoiceButton.setBackground(Color.lightGray);
        if (questionNum < 5) {
            switch (userAnswers.get(questionNum)) {
                case "A":
                    aChoiceButton.setBackground(Color.green);
                    break;
                case "B":
                    bChoiceButton.setBackground(Color.green);
                    break;
                case "C":
                    cChoiceButton.setBackground(Color.green);
                    break;
                case "D":
                    dChoiceButton.setBackground(Color.green);
            }
        }
    }
    
    /**
     * Used when the user submits their test. This method calculates their grade.
     */
    public void calculateScore()
    {
        float correctCount = 0; //counts correct answers
        
        for( int i=0; i<5; i++ )
        {
            if( userAnswerScore.get(i).equals("Correct") )
                correctCount++;
        }
        
        //set the score
        score = ( correctCount / 5 ) * 100;
        
        //set the grade
        if( score >= 90 )
            grade = "A+";
        else if ( score >= 80 )
            grade = "A";
        else if (score >= 75 )
            grade = "B+";
        else if (score >= 65 )
            grade = "B";
        else if (score >= 60 )
            grade = "C+";
        else if (score >= 50 )
            grade = "C";
        else if (score >= 45 )
            grade = "D+";
        else if (score >= 40 )
            grade = "D";
        else
            grade = "E";
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
        * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new ClientMenu().setVisible(false);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aChoiceButton;
    private javax.swing.JButton bChoiceButton;
    private javax.swing.JButton cChoiceButton;
    private javax.swing.JButton dChoiceButton;
    private javax.swing.JDialog dbNoConnectDialog;
    private javax.swing.JLabel errorDescription;
    private javax.swing.JButton exitApplicationButton;
    private javax.swing.JTextField nameField;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JButton nextQButton;
    private javax.swing.JButton prevQButton;
    private javax.swing.JLabel questionPanel;
    private javax.swing.JButton retryConnectButton;
    private javax.swing.JButton startTestButton;
    private javax.swing.JTextField studentIdField;
    private javax.swing.JLabel studentIdLabel;
    private javax.swing.JFrame userInfoFrame;
    // End of variables declaration//GEN-END:variables
}
